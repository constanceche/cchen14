Constance Chen
SoftDev 
LJ01: Le Voyage de Learnination avec Mongo, Deuxi√®me Phase
    Chapter 4 of Mongo Course
Due Nov 12 2020 

QUERY OPERATORS:

Comparison Operators - 

Update Operators: enable us to modify date in database
Query Operators: provide additional ways to locate data
$ has mulitple uses
- $eq = equal to
- $neq = not equal to
- $gt = greater than
- $gte = greater than or equal to
- $lt = less than
- $lte = less than or equal to

    (connect)
    mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

    (switch)
    use sample_training

    (find all documents where the tripduration was less than or equal to 70 seconds and the usertype was not Subscriber)
    db.trips.find({ "tripduration": { "$lte" : 70 },
                    "usertype": { "$ne": "Subscriber" } }).pretty()

    (find all documents where the tripduration was less than or equal to 70 seconds and the usertype was Customer using the implicit equality operator)
    db.trips.find({ "tripduration": { "$lte" : 70 },
                    "usertype": "Customer" }).pretty()

- query operators provide additional ways to locate data within the database
- comparison operators specifically allow us to find data within a certain range
        - {<field> : { < operator> : <value> }}
- $eq is used as the defult operator when an operator is not specified

Logic Operators - 

- $and: is used as the default operator when an operator is not speficied
- $or -> {<operator>}: [{statement1},{statement2},...]}
- $nor
- $not -> {$not: {statement}}

    (connect)
    mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

    (switch)
    use sample_training

    (find all documents where airplanes CR2 or A81 left or landed in the KZN airport)
    db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },
                                        { "src_airport": "KZN" }
                                    ] },
                            { "$or" :[ { "airplane": "CR2" },
                                        { "airplane": "A81" } ] }
                            ]}).pretty()

- logic operators allow us to be more granular in our search for data
        - {"$<operator>": [{<clause>}, {<clause2.},...]}
        - {$not: {<clause>}}
- $and is used as the default operator when an operator is not specified
        - explicitly use $and when you need to include the same operator more than once in query


Expressive Query Operator - 

    (connect)
    mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

    (switch)
    use sample_training

    (find all documents where the trip started and ended at the same station)
    db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }
                }).count()

    (find all documents where the trip lasted longer than 1200 seconds, and started and ended at the same station)
    db.trips.find({ "$expr": { "$and": [ { "$gt": [ "$tripduration", 1200 ]},
                            { "$eq": [ "$end station id", "$start station id" ]}
                        ]}}).count()

- $expr: allows for more complex queries and for comparing filed within a document
- the $ can use used to access the field value
        - {<operator>: {<field>, <value>}}

Array Operators - 
(connect)
mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

(switch)
use sample_airbnb

(find all documents with exactly 20 amenities which include all the amenities listed in the query array)
db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()

- {<array field>: {"$size": <number>}}: returns a cursor with all documents where the specified array field is exactly the given length
- {<array field>: {"$all": <array>}}: returns a cursor with all documents in which the specifed array fild contains all the given elements regardless of their order in the array
- query an array field using and array returns only exactly array matches
